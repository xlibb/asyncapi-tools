/*
 * Copyright (c) 2022, WSO2 LLC. (http://www.wso2.com). All Rights Reserved.
 *
 * WSO2 Inc. licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

apply from: "$rootDir/gradle/javaProject.gradle"
apply plugin: "com.github.johnrengelman.shadow"
apply plugin: "java"

description = "Ballerina - AsyncAPI Tooling - AsyncAPI to Ballerina"

configurations.all {
    resolutionStrategy.preferProjectModules()
}

configurations {
    balTools
}


dependencies {
    implementation "com.fasterxml.jackson.core:jackson-databind"
    implementation "info.picocli:picocli"
    implementation "org.ballerinalang:ballerina-lang"
    implementation "org.ballerinalang:ballerina-parser"
    implementation "org.ballerinalang:formatter-core"
    implementation "org.ballerinalang:ballerina-cli"
    implementation "org.ballerinalang:ballerina-runtime"
    implementation "org.ballerinalang:ballerina-tools-api"
    implementation "com.google.code.findbugs:jsr305"
    implementation "commons-io:commons-io"
    implementation "io.apicurio:apicurio-data-models"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml"
    testImplementation "org.testng:testng"
    balTools ("org.ballerinalang:jballerina-tools:${ballerinaLangVersion}") {
        transitive = false
    }
}
tasks.register("jBallerinaPack")
tasks.register("unpackStdLibs")
tasks.register("copyStdlibs",Copy )

def bDistribution = file("$project.buildDir/extracted-distribution/jballerina-tools-${ballerinaLangVersion}")
jBallerinaPack {
    doLast {
        configurations.balTools.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            copy {
                from project.zipTree(artifact.getFile())
                into new File(project.buildDir, "extracted-distribution/")
            }
        }
    }
    outputs.dir bDistribution
}

unpackStdLibs() {
    dependsOn(jBallerinaPack)
    doLast {
        configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            copy {
                from project.zipTree(artifact.getFile())
                into new File("${project.buildDir}/extracted-distribution/" + artifact.name + "-zip")
            }
        }
    }
}


copyStdlibs{
    dependsOn(unpackStdLibs)
    def ballerinaDist = "$project.buildDir/extracted-distribution/jballerina-tools-${ballerinaLangVersion}"
    into ballerinaDist

    /* Standard Libraries */
    configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        def artifactExtractedPath = "${project.buildDir}/extracted-distribution/" + artifact.name + "-zip"
        into("repo/bala") {
            from "${artifactExtractedPath}/bala/"
            duplicatesStrategy= DuplicatesStrategy.EXCLUDE
        }
        into("repo/cache") {
            from "${artifactExtractedPath}/cache"
            duplicatesStrategy= DuplicatesStrategy.EXCLUDE
        }
    }
}

test {
    dependsOn {
        copyStdlibs
    }
    systemProperty "ballerina.home", bDistribution

    useTestNG() {
        suites "src/test/resources/testng.xml"
    }
}

//shadowJar {
//    configurations = [project.configurations.runtimeClasspath]
//    dependencies {
//        include(dependency('com.github.jknack:handlebars'))
//        include(dependency('org.antlr:antlr4:4.5'))
//        include(dependency('com.atlassian.commonmark:commonmark'))
//        include(dependency('com.atlassian.commonmark:commonmark-ext-gfm-tables'))
//        exclude('META-INF/*.SF')
//        exclude('META-INF/*.DSA')
//        exclude('META-INF/*.RSA')
//    }
//}

compileJava {
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
        ]
        classpath = files()
    }
}
